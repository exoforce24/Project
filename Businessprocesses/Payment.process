<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
    <pd:name>Businessprocesses/Payment.process</pd:name>
    <pd:startName>Payment Trigger</pd:startName>
    <pd:startX>0</pd:startX>
    <pd:startY>0</pd:startY>
    <pd:returnBindings/>
    <pd:starter name="Payment Trigger">
        <pd:type>com.tibco.plugin.java.JavaEventSource</pd:type>
        <pd:resourceType>ae.activities.JavaEventSource</pd:resourceType>
        <pd:description>This triggers the payment when blacklist boolean is false
</pd:description>
        <pd:x>136</pd:x>
        <pd:y>136</pd:y>
        <config>
            <packageName>Businessprocesses.Payment</packageName>
            <fileName>Businessprocesses.Payment</fileName>
            <fullsource>package Businessprocesses.Payment;
import java.util.*;
import java.io.*;
import com.tibco.plugin.java.JavaProcessStarter;
/**
 * This class allows users to write custom process starters using the java programming
 * language. It extends JavaProcessStarter abstract class that interfaces with the ActiveMatrix Business
 * works engine. JavaProcessStarter class defines following four abstract methods:
 * 	 1) init() - Allows users to initialize their resources.
 * 	 2) onStart() - Allows users to activate their listeners or Observers or kick off a process
 *                   by calling onEvent(object inputData).
 * 	 3) onStop() - Allows user to de-activate their listeners or Observers.
 * 	 4) onShutdown() - Allows users to release the resources. This method is somewhat similar to finalize()
 * 
 * JavaProcessStarter also defines three non-abstract methods:
 * 	 1) getGlobalInstance() - It returns an instance of Java Global Instance defined in the advanced tab.
 * 	 2) onEvent(Object object) - It is the main entry point into the ActiveMartix Business Works engine. This
                                   method must be called in onStart() or in the listener or observer interface
 *                                 to trigger the process.
 * 	 3) onError(Throwable throwable) - It allows the user to throw an exception if the listener or observer fails
 *                                      to generate an notification event.
 */
public class PaymentPaymentTrigger extends JavaProcessStarter {
	public PaymentPaymentTrigger() {
	}

	/**
	 * Initializes the Java Event Source component during ActiveMatrix Business Works engine
	 * start-up. It is highly recommended to initialize resource connections
	 * in this method. Resource connections can also be defined as Java Global Instance.
	 * To configure Java Global Instance use the advanced tab. It is a common practice to
	 * define resource connection as Java Global Instance. Users can get a handle to the Java
	 * Global Instance by calling this.getJavaGlobalInstance().
	 */
	public void init() throws Exception {
	}
	/**
	 * This method is called by ActiveMatrix Business Works engine to activate the Java Event Source. This is
	 * an ideal place for users to add notifier or resource observer. The notifier/observer
	 * can then call onEvent(Object inputData) method to kick off a process instance.
	 */
	public void onStart() throws Exception {
	}
	/** This method is called by ActiveMatrix Business Works engine to de-activate the Event Source. User can 
	 * add code to de-activate a notifier or resource observer. 
	 */
	public void onStop() throws Exception {
	}
	/** This method is called at ActiveMatrix Business Works engine shutdown. User can add cleanup code in 
	 *  this method
	 */
	public void onShutdown() {
	}
}</fullsource>
            <externalClass>false</externalClass>
            <fileName_archive>Businessprocesses.Payment</fileName_archive>
            <packageName_archive>Businessprocesses.Payment</packageName_archive>
            <java_source_archive/>
        </config>
        <pd:inputBindings/>
    </pd:starter>
    <pd:endName>End</pd:endName>
    <pd:endX>480</pd:endX>
    <pd:endY>138</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables/>
    <pd:targetNamespace>http://xmlns.example.com/1521627188978</pd:targetNamespace>
    <pd:activity name="Invoke PayPal API">
        <pd:type>com.tibco.plugin.json.activities.RestActivity</pd:type>
        <pd:resourceType>ae.activities.RestActivity</pd:resourceType>
        <pd:x>302</pd:x>
        <pd:y>139</pd:y>
        <config>
            <enableProtocolUI>None</enableProtocolUI>
            <restMethodUI>POST</restMethodUI>
            <restResponseType>JSON</restResponseType>
            <authChoiceUI>OAuth2.0</authChoiceUI>
            <WADLPaths/>
            <WADLBaseURL/>
            <restMethodIDUI/>
            <OAuth2ParamPosition>Header</OAuth2ParamPosition>
            <restURI>https://api.sandbox.paypal.com/v1/payments/payment \</restURI>
            <restInputReferNode>
                <xsd:element name="Parameters">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Query" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="Header" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                            <xsd:element name="Body" minOccurs="0">
                                <xsd:complexType>
                                    <xsd:sequence>
                                        <xsd:element name="Form" minOccurs="0">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="param" type="xsd:string" minOccurs="0"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="Text" minOccurs="0">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content" type="xsd:string" minOccurs="0"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="Binary" minOccurs="0">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="type" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content" type="xsd:base64Binary" minOccurs="0"/>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                        <xsd:element name="Multipart" minOccurs="0" maxOccurs="unbounded">
                                            <xsd:complexType>
                                                <xsd:sequence>
                                                    <xsd:element name="content-disposition" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="name" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="filename" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content-type" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content-id" type="xsd:string" minOccurs="0"/>
                                                    <xsd:element name="content" minOccurs="0">
                                                        <xsd:complexType>
                                                            <xsd:choice>
                                                                <xsd:element name="binary" type="xsd:base64Binary"/>
                                                                <xsd:element name="text" type="xsd:string"/>
                                                                <xsd:element name="fileName" type="xsd:string"/>
                                                            </xsd:choice>
                                                        </xsd:complexType>
                                                    </xsd:element>
                                                </xsd:sequence>
                                            </xsd:complexType>
                                        </xsd:element>
                                    </xsd:sequence>
                                </xsd:complexType>
                            </xsd:element>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </restInputReferNode>
            <restOutputReferNode>
                <xsd:element name="header">
                    <xsd:complexType>
                        <xsd:sequence>
                            <xsd:element name="Server" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Location" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Allow" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Date" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Set-Cookie" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Pragma" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Type" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Length" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Encoding" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Content-Range" type="xsd:string" minOccurs="0"/>
                            <xsd:element name="Last-Modifie" type="xsd:string" minOccurs="0"/>
                        </xsd:sequence>
                    </xsd:complexType>
                </xsd:element>
            </restOutputReferNode>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Parse JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONParserActivity</pd:type>
        <pd:resourceType>ae.activities.JSONParserActivity</pd:resourceType>
        <pd:x>351</pd:x>
        <pd:y>262</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="Render JSON">
        <pd:type>com.tibco.plugin.json.activities.JSONRenderActivity</pd:type>
        <pd:resourceType>ae.activities.JSONRenderActivity</pd:resourceType>
        <pd:x>553</pd:x>
        <pd:y>260</pd:y>
        <config>
            <SchemaType>xsdType</SchemaType>
            <BadgerfishCheck>false</BadgerfishCheck>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:activity name="REST Dispatch and Reply">
        <pd:type>com.tibco.plugin.json.rest.server.activities.RestAdapterActivity</pd:type>
        <pd:resourceType>rest.activities.RestAdapter</pd:resourceType>
        <pd:x>168</pd:x>
        <pd:y>332</pd:y>
        <config>
            <RestService>
                <InnerService>
                    <ns0:application xmlns:ns0="http://wadl.dev.java.net/2009/02" name="Application"/>
                </InnerService>
            </RestService>
        </config>
        <pd:inputBindings/>
    </pd:activity>
    <pd:transition>
        <pd:from>Payment Trigger</pd:from>
        <pd:to>Invoke PayPal API</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
    <pd:transition>
        <pd:from>Invoke PayPal API</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>